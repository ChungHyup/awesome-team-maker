{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","constants/teamConstants.js","reducers/index.js","reducers/teamReducer.js","utils/store.js","index.js"],"names":["module","exports","App","useState","grpCnt","setGrpcnt","memCnt","setMemCnt","message","setMessage","members","setMembers","suffledMembers","setSuffledMembers","memberChange","e","index","Number","target","name","copy","slice","value","Box","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Container","mt","Grid","container","direction","alignItems","spacing","item","TextField","id","label","type","InputLabelProps","shrink","onChange","disabled","Alert","Paper","elevation","p","textAlign","Array","apply","length","map","i","xs","sm","Button","onClick","suffled","a","Math","random","sort","b","floor","Boolean","window","location","hostname","match","teamConstants","rootReducer","combineReducers","teams","state","action","produce","draft","push","member","loggerMiddleware","createLogger","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.74307e0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AppBar, Toolbar, IconButton, Typography, Button, Container, Box, TextField, Grid, Paper} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Alert } from '@material-ui/lab';\n\nfunction App() {\n  const [grpCnt, setGrpcnt] = useState(1)\n  const [memCnt, setMemCnt] = useState(1);\n  const [message, setMessage] = useState();\n  const [members, setMembers] = useState([\"\"]);\n  const [suffledMembers, setSuffledMembers] = useState();\n\n  const groupCountChange = (e) => {\n    if(e.target.value !== 1) {\n      setMessage(\"그룹 만들기 귀찮.....\");\n      return;\n    }\n    setMessage();\n    setGrpcnt(Number(e.target.value));\n  }\n\n  const memberCountChange = (e) => {\n    if(e.target.value < 1 || e.target.value > 10) {\n      setMessage(\"1~10 입력하세요\");\n      return;\n    }\n    setMessage();\n    setMemCnt(Number(e.target.value));\n    setMembers(Array.apply(null, { length: e.target.value }))\n  }\n\n  const memberChange = (e) => {\n    const index = Number(e.target.name);\n    const copy = members.slice();\n    copy[index] = e.target.value\n    setMembers(copy)\n  }\n\n  const onButtonClick = (e) => {\n    const copy = members.slice();\n    const suffled = copy\n      .map(a => ([Math.random(),a]))\n      .sort((a,b) => a[0]-b[0])\n      .map(a => a[1])\n    setSuffledMembers(suffled);\n  }\n  return (\n    <Box>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">\n            Awesome Team Maker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Box mt={4}>\n          <Grid container direction=\"row\"   alignItems=\"center\" spacing={4}>\n            <Grid item>\n              <TextField\n                id=\"outlined-number\"\n                label=\"그룹수\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                value={grpCnt}\n                variant=\"outlined\"\n                onChange={groupCountChange}\n                disabled\n              />\n            </Grid>\n          </Grid>\n          { message &&\n            <Alert>{message}</Alert>\n          }\n        </Box>\n        <Box mt={4}>\n          <Paper elevation={3}>\n            <Box p={1}>\n              <Box textAlign=\"left\">\n                <h3>Group1</h3>\n              </Box>\n              <Box>\n                <TextField\n                  id=\"outlined-number\"\n                  label=\"사람수\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  value={memCnt}\n                  variant=\"outlined\"\n                  onChange={memberCountChange}\n                />\n              </Box>\n              <Box mt={2}>\n                <Grid container spacing={1}>\n                { members.map( (e, i) => {\n                  return (\n                    <Grid item xs={6} sm={2}>\n                      <TextField\n                        id=\"outlined-number\"\n                        label=\"이름\"\n                        InputLabelProps={{\n                          shrink: true,\n                        }}\n                        value={members[i]}\n                        variant=\"outlined\"\n                        onChange={memberChange}\n                        name={i}\n                      />\n                    </Grid>\n                  )\n                })}\n                </Grid>\n              </Box>\n              <Box mt={4} textAlign=\"center\">\n                <Button variant=\"contained\" color=\"primary\" onClick={onButtonClick}>\n                  팀나누기\n                </Button>\n              </Box>\n              { suffledMembers &&\n                <Box mt={4}>\n                  <Grid container direction=\"row\">\n                    <Grid xs={6}>\n                      <Box textAlign=\"center\">\n                        <h3>블루팀</h3>\n                        { Array.apply(null, { length: Math.floor(suffledMembers.length/2) }).map( (e, i) => {\n                          return(\n                            <Box>\n                              {suffledMembers[i]}\n                            </Box>\n                          )\n                          \n                        })}\n                      </Box>\n                    </Grid>\n                    <Grid xs={6}>\n                      <Box textAlign=\"center\">\n                        <h3>레드팀</h3>\n                        { Array.apply(null, { length: suffledMembers.length - Math.floor(suffledMembers.length/2) }).map( (e, i) => {\n                          return(\n                            <Box>\n                              {suffledMembers[Math.floor(suffledMembers.length/2)+i]}\n                            </Box>\n                          )\n                        })}\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </Box>\n              }\n            </Box>\n          </Paper>\n        </Box>\n      </Container>\n    </Box>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const teamConstants = {\n  ADD: \"ADD_MEMBER\"\n}","import { combineReducers } from 'redux';\n\nimport { teams } from './teamReducer';\n\nconst rootReducer = combineReducers({\n  teams\n});\n\nexport default rootReducer;","import produce from 'immer';\nimport { teamConstants } from '../constants/teamConstants';\n\nexport function teams(state = {\n  members:[]\n}, action) {\n  switch (action.type) {\n    case teamConstants.ADD:\n      return produce(state, draft => {\n        draft.members.push(action.member)\n      })\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\nimport storage from 'redux-persist/lib/storage'\nimport { persistStore, persistReducer } from 'redux-persist';\n\nconst loggerMiddleware = createLogger();\n\nconst persistConfig = {\n  key: 'root',\n  storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default() => {\n  let store = createStore(\n    persistedReducer,\n    applyMiddleware(\n      thunkMiddleware,\n      loggerMiddleware\n    )\n  );\n  let persistor = persistStore(store);\n\n  return { store, persistor }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\n\nReactDOM.render(\n  <Provider store={store().store}>\n    <PersistGate loading={null} persistor={store().persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}